// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  groups        Member[]
  accounts      Account[]
  teacherGroups Group[]
  notifactions  Notification[] @relation("receptor")
  emisor        Notification[] @relation("emisor")
}

model Group {
  id      Int            @id @default(autoincrement()) @db.Integer
  title   String
  code    String
  userId  String
  members Member[]
  teacher User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  history Notification[]
}

model Notification {
  id         Int      @id @default(autoincrement()) @db.Integer
  groupId    Int?     @db.Integer
  userId     String
  emisor     String
  created_at DateTime @default(now())
  type       String
  group      Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user       User     @relation("receptor", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userEmisor User     @relation("emisor", fields: [emisor], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Member {
  id      Int    @id @default(autoincrement()) @db.Integer
  groupId Int    @db.Integer
  userId  String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
